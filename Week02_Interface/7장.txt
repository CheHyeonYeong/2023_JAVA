추상 클래스, 인터페이스, 중첩 클래스

1. 추상 클래스
- 완전하게 구현되어 있지 앟은 메소드를 가지고 있는 클래스
- 객체 생성이 안됨
- 자바 추상 클래스 생성 -> 클래스 선언 시 앞에 "abtract"를 붙인다.
- 추상 메소드로 정의되면 자식 클래스에서 반드시 오버라이드하여야 한다. 하지 않으면 오류 발생 -> 일반 메소드로 정의되면 자식 클래스에서 오버라이드하지 않아도 컴파일러가 체크할 방법이 없다.

2. 인터페이스
- sw 사이의 상호작용 규격을 나타낼 수 있음
- 상속 관계가 아니다. 클래스 간의 유사성을 인코딩하는데 사용된다.
- 다중 상속이 필요할 시 사용
- interface로 정의하면 된다
- 구현 시 다른 클래스에 의하여 구현(implement)될 수 있다.
- 인터페이스끼리도 상속 가능다.
- 변수는 바로 public static final이 되어 상수가 된다.

2-1. 다중상속
- 하나의 클래스가 여러 개의 부모 클래스를 가지는 것
- 다이아몬드 문제 : 오버라이드 메소드 시 부모 객체가 비확실 한 문제

2-2. 인터페이스 vs 추상 클래스
- 추상 클래스 사용 권장
    - 관련 클래스들 사이의 코드 공유
    - 공통적인 필드, 메소드 수가 많은 경우
    - 정적이 아닌 필드나 상수가 아닌 필드를 선언하기를 원할 때 사용
- 인터페이스 사용 권장
    - 관련 없는 클래스들이 동일한 동작을 수행 시
    - 특정 자료형의 동작을 지정하고 싶지만 구현 대상자가 중요치 않을 때
    - 다중 상속이 필요할 때 : 단, 인터페이스에서는 상속의 개념이 아님.

